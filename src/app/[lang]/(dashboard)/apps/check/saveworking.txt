'use client'

// React Imports
import { useRef, useState } from 'react'

// Next Imports
import { usePathname } from 'next/navigation'
import Image from 'next/image'

// MUI Imports
import Chip from '@mui/material/Chip'
import Fade from '@mui/material/Fade'
import Paper from '@mui/material/Paper'
import Popper from '@mui/material/Popper'
import { useTheme } from '@mui/material/styles'
import ClickAwayListener from '@mui/material/ClickAwayListener'
import { Button, Container } from '@mui/material'

// Third-party Imports
import classnames from 'classnames'
import { useDebounce, useMedia } from 'react-use'
import { HexColorPicker, HexColorInput } from 'react-colorful'
import PerfectScrollbar from 'react-perfect-scrollbar'

// Config Imports
import { primaryColorConfig, secondaryColorConfig, tertiaryColorConfig } from './styleColorConfig'

// Style Imports
import styles from './styles.module.css'

const DebouncedColorPicker = ({ color, onChange }) => {
  const [debouncedColor, setDebouncedColor] = useState(color)

  useDebounce(() => onChange(debouncedColor), 200, [debouncedColor])

  return (
    <>
      <HexColorPicker color={debouncedColor} onChange={setDebouncedColor} />
      <HexColorInput
        className={styles.colorInput}
        color={debouncedColor}
        onChange={setDebouncedColor}
        prefixed
        placeholder='Type a color'
      />
    </>
  )
}

const Customizer = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [imgSrc, setImgSrc] = useState('/images/logos/twitter.png')
  const [fileInput, setFileInput] = useState('')
  const [selectedFont, setSelectedFont] = useState('Arial')

  const [settings, setSettings] = useState({
    primaryColor: primaryColorConfig[0].main,
    secondaryColor: secondaryColorConfig[0].main,
    tertiaryColor: tertiaryColorConfig[0].main,
  })

  const fontOptions = ['Arial', 'Roboto', 'Helvetica']
  const theme = useTheme()
  const pathName = usePathname()
  const anchorRef = useRef(null)
  const isBelowLgScreen = useMedia('(max-width: 1200px)', false)
  const ScrollWrapper = isBelowLgScreen ? 'div' : PerfectScrollbar

  const handleChange = (field, value) => {
    setSettings((prevSettings) => ({
      ...prevSettings,
      [field]: value,
    }))

    // Add your code to update the settings in the database here.
  }

  const handleMenuClose = (event) => {
    if (anchorRef.current && anchorRef.current.contains(event.target)) {
      return
    }

    setIsMenuOpen(false)
  }

  const handleImgReset = () => {
    setImgSrc('/images/logos/twitter.png')
    setFileInput('')
  }

  const handleFileInputChange = (file) => {
    const reader = new FileReader()
    const { files } = file.target

    if (files && files.length !== 0) {
      reader.onload = () => setImgSrc(reader.result)
      reader.readAsDataURL(files[0])

      if (reader.result !== null) {
        setFileInput(reader.result)
      }
    }
  }

  return (
    <ScrollWrapper>
      <div className={classnames('customizer-toggler flex items-center justify-center cursor-pointer', styles.toggler)}>
        <i className='tabler-settings text-[22px]' />
      </div>
      <div className={classnames('customizer-header flex items-center justify-between', styles.header)}>
        <div className='flex flex-col'>
          <h4 className={styles.customizerTitle}>Theme Customizer</h4>
          <p className={styles.customizerSubtitle}>Customize & Preview in Real Time</p>
        </div>
        <div className='flex gap-4'>
          <div onClick={() => setSettings({
            primaryColor: primaryColorConfig[0].main,
            secondaryColor: secondaryColorConfig[0].main,
            tertiaryColor: tertiaryColorConfig[0].main,
          })} className='relative flex cursor-pointer'>
            <i className={classnames('tabler-refresh', styles.textPrimaryColor)} />
            <div className={classnames(styles.dotStyles, { [styles.show]: true })} />
          </div>
        </div>
      </div>

      <div className={classnames('customizer-body flex flex-col', styles.customizerBody)}>
        <div className='theming-section flex flex-col gap-6'>
          <Chip label='Theming' size='small' color='primary' variant='tonal' className={classnames('self-start', styles.chip)} />

          <div className='flex flex-col gap-2'>
            <p className='font-medium'>Primary Color</p>
            <div className='flex items-center justify-between'>
              {primaryColorConfig.map((item) => (
                <div
                  key={item.main}
                  className={classnames(styles.primaryColorWrapper, {
                    [styles.active]: settings.primaryColor === item.main,
                  })}
                  onClick={() => handleChange('primaryColor', item.main)}
                >
                  <div className={styles.primaryColor} style={{ backgroundColor: item.main }} />
                </div>
              ))}
              <div
                ref={anchorRef}
                className={classnames(styles.primaryColorWrapper, {
                  [styles.active]: !primaryColorConfig.find((item) => item.main === settings.primaryColor),
                })}
                onClick={() => setIsMenuOpen((prev) => !prev)}
              >
                <div
                  className={classnames(styles.primaryColor, 'flex items-center justify-center')}
                  style={{
                    backgroundColor: !primaryColorConfig.find((item) => item.main === settings.primaryColor)
                      ? settings.primaryColor
                      : 'var(--mui-palette-action-selected)',
                    color: primaryColorConfig.find((item) => item.main === settings.primaryColor)
                      ? 'var(--mui-palette-text-primary)'
                      : 'var(--mui-palette-primary-contrastText)',
                  }}
                >
                  <i className='tabler-color-picker text-xl' />
                </div>
              </div>
              <Popper
                transition
                open={isMenuOpen}
                disablePortal
                anchorEl={anchorRef.current}
                placement='bottom-end'
                className='z-[1]'
              >
                {({ TransitionProps }) => (
                  <Fade {...TransitionProps} style={{ transformOrigin: 'right top' }}>
                    <Paper elevation={6} className={styles.colorPopup}>
                      <ClickAwayListener onClickAway={handleMenuClose}>
                        <div>
                          <DebouncedColorPicker
                            color={settings.primaryColor}
                            onChange={(color) => handleChange('primaryColor', color)}
                          />
                        </div>
                      </ClickAwayListener>
                    </Paper>
                  </Fade>
                )}
              </Popper>
            </div>
          </div>

          <div className='flex flex-col gap-2'>
            <p className='font-medium'>Secondary Color</p>
            <div className='flex items-center justify-between'>
              {secondaryColorConfig.map((item) => (
                <div
                  key={item.main}
                  className={classnames(styles.primaryColorWrapper, {
                    [styles.active]: settings.primaryColor === item.main,
                  })}
                  onClick={() => handleChange('primaryColor', item.main)}
                >
                  <div className={styles.primaryColor} style={{ backgroundColor: item.main }} />
                </div>
              ))}
              <div
                ref={anchorRef}
                className={classnames(styles.primaryColorWrapper, {
                  [styles.active]: !primaryColorConfig.find((item) => item.main === settings.primaryColor),
                })}
                onClick={() => setIsMenuOpen((prev) => !prev)}
              >
                <div
                  className={classnames(styles.primaryColor, 'flex items-center justify-center')}
                  style={{
                    backgroundColor: !primaryColorConfig.find((item) => item.main === settings.primaryColor)
                      ? settings.primaryColor
                      : 'var(--mui-palette-action-selected)',
                    color: primaryColorConfig.find((item) => item.main === settings.primaryColor)
                      ? 'var(--mui-palette-text-primary)'
                      : 'var(--mui-palette-primary-contrastText)',
                  }}
                >
                  <i className='tabler-color-picker text-xl' />
                </div>
              </div>
              <Popper
                transition
                open={isMenuOpen}
                disablePortal
                anchorEl={anchorRef.current}
                placement='bottom-end'
                className='z-[1]'
              >
                {({ TransitionProps }) => (
                  <Fade {...TransitionProps} style={{ transformOrigin: 'right top' }}>
                    <Paper elevation={6} className={styles.colorPopup}>
                      <ClickAwayListener onClickAway={handleMenuClose}>
                        <div>
                          <DebouncedColorPicker
                            color={settings.primaryColor}
                            onChange={(color) => handleChange('primaryColor', color)}
                          />
                        </div>
                      </ClickAwayListener>
                    </Paper>
                  </Fade>
                )}
              </Popper>
            </div>
          </div>

          <div className='flex flex-col gap-2'>
            <p className='font-medium'>Tertiary Color</p>
            <div className='flex items-center justify-between'>
              {tertiaryColorConfig.map((item) => (
                <div
                  key={item.main}
                  className={classnames(styles.primaryColorWrapper, {
                    [styles.active]: settings.primaryColor === item.main,
                  })}
                  onClick={() => handleChange('primaryColor', item.main)}
                >
                  <div className={styles.primaryColor} style={{ backgroundColor: item.main }} />
                </div>
              ))}
              <div
                ref={anchorRef}
                className={classnames(styles.primaryColorWrapper, {
                  [styles.active]: !primaryColorConfig.find((item) => item.main === settings.primaryColor),
                })}
                onClick={() => setIsMenuOpen((prev) => !prev)}
              >
                <div
                  className={classnames(styles.primaryColor, 'flex items-center justify-center')}
                  style={{
                    backgroundColor: !primaryColorConfig.find((item) => item.main === settings.primaryColor)
                      ? settings.primaryColor
                      : 'var(--mui-palette-action-selected)',
                    color: primaryColorConfig.find((item) => item.main === settings.primaryColor)
                      ? 'var(--mui-palette-text-primary)'
                      : 'var(--mui-palette-primary-contrastText)',
                  }}
                >
                  <i className='tabler-color-picker text-xl' />
                </div>
              </div>
              <Popper
                transition
                open={isMenuOpen}
                disablePortal
                anchorEl={anchorRef.current}
                placement='bottom-end'
                className='z-[1]'
              >
                {({ TransitionProps }) => (
                  <Fade {...TransitionProps} style={{ transformOrigin: 'right top' }}>
                    <Paper elevation={6} style={{ padding: '16px', marginTop: '1px' }}>
                      <ClickAwayListener onClickAway={handleMenuClose}>
                        <div>
                          <DebouncedColorPicker
                            color={settings.primaryColor}
                            onChange={(color) => handleChange('primaryColor', color)}
                          />
                        </div>
                      </ClickAwayListener>
                    </Paper>
                  </Fade>
                )}
              </Popper>
            </div>
          </div>

          <div className='flex flex-col gap-2'>
            <label htmlFor='fontDropdown' className='font-medium'>Font</label>
            <select
              id='fontDropdown'
              value={selectedFont}
              onChange={(e) => setSelectedFont(e.target.value)}
              className='border rounded p-2'
            >
              {fontOptions.map((font) => (
                <option key={font} value={font}>{font}</option>
              ))}
            </select>
          </div>

          <Container className='mt-4' style={{ fontFamily: selectedFont }}>
            <p>
              This is a sample paragraph preview. Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate,
              doloremque ullam. Iusto magnam molestiae magni, numquam suscipit soluta dignissimos illo officiis
              voluptatum, dolor libero sunt dolores repudiandae repellat cumque. Animi sapiente beatae rerum dolor ad
              sint, harum minus veritatis doloremque atque magni inventore ut libero. Dolor aut ducimus sapiente maiores
              consectetur odit, facere amet omnis consequuntur atque harum nobis sed expedita nihil aliquam nemo eveniet
              repellat laudantium blanditiis vitae corrupti, molestiae vero. Dolores, maiores ab doloremque, dignissimos
              sunt nihil modi error qui officiis molestiae natus, id delectus ipsa est at iure sed laborum. Atque aliquam
              laborum velit consequuntur. Quo, nisi?
            </p>
          </Container>
        </div>
      </div>

      <div>
        <Image className='rounded' height={100} width={100} alt={'Logo'} src={imgSrc} />

        <div>
          <Button component='label' variant='contained' htmlFor='website-logo-upload'>
            Upload New Logo
            <input
              hidden
              type='file'
              value={fileInput}
              accept='image/png, image/jpeg'
              onChange={handleFileInputChange}
              id='website-logo-upload'
            />
          </Button>
          <Button onClick={handleImgReset} variant='tonal' color='secondary'>
            Reset
          </Button>
        </div>
      </div>
    </ScrollWrapper>
  )
}


// saving incompelete but good enough

// working code

'use client'

// React Imports
import { useRef, useState } from 'react'

// Next Imports
import { usePathname } from 'next/navigation'
import Image from 'next/image'

// MUI Imports
import Chip from '@mui/material/Chip'
import Fade from '@mui/material/Fade'
import Paper from '@mui/material/Paper'
import Popper from '@mui/material/Popper'

import ClickAwayListener from '@mui/material/ClickAwayListener'
import { Button, Container } from '@mui/material'

// Third-party Imports
import classnames from 'classnames'
import { useMedia } from 'react-use'

import PerfectScrollbar from 'react-perfect-scrollbar'

import DebouncedColorPicker from './DebouncedColorPicker'

// Config Imports
import { primaryColorConfig, secondaryColorConfig, tertiaryColorConfig, testingColorConfig } from './styleColorConfig'

// Style Imports
import styles from './styles.module.css'

const Customizer = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [imgSrc, setImgSrc] = useState('/images/logos/twitter.png')
  const [fileInput, setFileInput] = useState('')
  const [selectedFont, setSelectedFont] = useState('Arial')

  const [primaryColor, setPrimaryColor] = useState("#ffffff")
  const [secondaryColor, setSecondaryColor] = useState("#ffffff")
  const [tertiaryColor, setTertiaryColor] = useState("#ffffff")
  const [testingColor, setTestingColor] = useState("#ffffff")
  const [color, setColor] = useState("#ffffff")

  const fontOptions = ['Arial', 'Roboto', 'Helvetica']
  const anchorRef = useRef(null)
  const isBelowLgScreen = useMedia('(max-width: 1200px)', false)
  const ScrollWrapper = isBelowLgScreen ? 'div' : PerfectScrollbar

  const handleChange = (field, value) => {
    setSettings(prevSettings => ({
      ...prevSettings,
      [field]: value
    }))


    // Add your code to update the settings in the database here.
  }

  const handleMenuClose = event => {
    if (anchorRef.current && anchorRef.current.contains(event.target)) {
      return
    }

    setIsMenuOpen(false)
  }

  const handleImgReset = () => {
    setImgSrc('/images/logos/twitter.png')
    setFileInput('')
  }

  const handleFileInputChange = file => {
    const reader = new FileReader()
    const { files } = file.target

    if (files && files.length !== 0) {
      reader.onload = () => setImgSrc(reader.result)
      reader.readAsDataURL(files[0])

      if (reader.result !== null) {
        setFileInput(reader.result)
      }
    }
  }

  return (
    <ScrollWrapper>
    
      
        <div className='flex flex-col'>
          <h4 className={styles.customizerTitle}>Theme Customizer</h4>
          <p className={styles.customizerSubtitle}>Customize & Preview in Real Time</p>
        </div>
       


      <div className={classnames('customizer-body flex flex-col', styles.customizerBody)}>
        <div className='theming-section flex flex-col gap-6'>
          <Chip
            label='Theming'
            size='small'
            color='primary'
            variant='tonal'
            className={classnames('self-start', styles.chip)}
          />
          <div className='flex gap-6'>
            {/* <div className='flex flex-col gap-2'>
              <p className='font-medium'>Primary Color</p>
              <div className='flex items-center justify-between'>
                {primaryColorConfig.map(item => (
                  <div
                    key={item.main}
                    className={classnames(styles.primaryColorWrapper, {
                      [styles.active]: settings.primaryColor === item.main
                    })}
                    onClick={() => handleChange('primaryColor', item.main)}
                  >
                    <div className={styles.primaryColor} style={{ backgroundColor: item.main }} />
                  </div>
                ))}
                <div
                  ref={anchorRef}
                  className={classnames(styles.primaryColorWrapper, {
                    [styles.active]: !primaryColorConfig.find(item => item.main === settings.primaryColor)
                  })}
                  onClick={() => setIsMenuOpen(prev => !prev)}
                >
                  <div
                    className={classnames(styles.primaryColor, 'flex items-center justify-center')}
                    style={{
                      backgroundColor: !primaryColorConfig.find(item => item.main === settings.primaryColor)
                        ? settings.primaryColor
                        : 'var(--mui-palette-action-selected)',
                      color: primaryColorConfig.find(item => item.main === settings.primaryColor)
                        ? 'var(--mui-palette-text-primary)'
                        : 'var(--mui-palette-primary-contrastText)'
                    }}
                  >
                    <i className='tabler-color-picker text-xl' />
                  </div>
                </div>
                <Popper
                  transition
                  open={isMenuOpen}
                  disablePortal
                  anchorEl={anchorRef.current}
                  placement='bottom-end'
                  className='z-[1]'
                >
                  {({ TransitionProps }) => (
                    <Fade {...TransitionProps} style={{ transformOrigin: 'right top' }}>
                      <Paper elevation={6} className={styles.colorPopup}>
                        <ClickAwayListener onClickAway={handleMenuClose}>
                          <div>
                            <DebouncedColorPicker
                              color={settings.primaryColor}
                              onChange={color => handleChange('primaryColor', color)}
                            />
                          </div>
                        </ClickAwayListener>
                      </Paper>
                    </Fade>
                  )}
                </Popper>
              </div>
            </div>

            <div className='flex flex-col gap-2'>
              <p className='font-medium'>Secondary Color</p>
              <div className='flex items-center justify-between'>
                {secondaryColorConfig.map(item => (
                  <div
                    key={item.main}
                    className={classnames(styles.primaryColorWrapper, {
                      [styles.active]: settings.primaryColor === item.main
                    })}
                    onClick={() => handleChange('primaryColor', item.main)}
                  >
                    <div className={styles.primaryColor} style={{ backgroundColor: item.main }} />
                  </div>
                ))}
                <div
                  ref={anchorRef}
                  className={classnames(styles.primaryColorWrapper, {
                    [styles.active]: !primaryColorConfig.find(item => item.main === settings.primaryColor)
                  })}
                  onClick={() => setIsMenuOpen(prev => !prev)}
                >
                  <div
                    className={classnames(styles.primaryColor, 'flex items-center justify-center')}
                    style={{
                      backgroundColor: !primaryColorConfig.find(item => item.main === settings.primaryColor)
                        ? settings.primaryColor
                        : 'var(--mui-palette-action-selected)',
                      color: primaryColorConfig.find(item => item.main === settings.primaryColor)
                        ? 'var(--mui-palette-text-primary)'
                        : 'var(--mui-palette-primary-contrastText)'
                    }}
                  >
                    <i className='tabler-color-picker text-xl' />
                  </div>
                </div>
                <Popper
                  transition
                  open={isMenuOpen}
                  disablePortal
                  anchorEl={anchorRef.current}
                  placement='bottom-end'
                  className='z-[1]'
                >
                  {({ TransitionProps }) => (
                    <Fade {...TransitionProps} style={{ transformOrigin: 'right top' }}>
                      <Paper elevation={6} className={styles.colorPopup}>
                        <ClickAwayListener onClickAway={handleMenuClose}>
                          <div>
                            <DebouncedColorPicker
                              color={settings.primaryColor}
                              onChange={color => handleChange('primaryColor', color)}
                            />
                          </div>
                        </ClickAwayListener>
                      </Paper>
                    </Fade>
                  )}
                </Popper>
              </div>
            </div>

            <div className='flex flex-col gap-2'>
              <p className='font-medium'>Tertiary Color</p>
              <div className='flex items-center justify-between'>
                {tertiaryColorConfig.map(item => (
                  <div
                    key={item.main}
                    className={classnames(styles.primaryColorWrapper, {
                      [styles.active]: settings.primaryColor === item.main
                    })}
                    onClick={() => handleChange('primaryColor', item.main)}
                  >
                    <div className={styles.primaryColor} style={{ backgroundColor: item.main }} />
                  </div>
                ))}
                <div
                  ref={anchorRef}
                  className={classnames(styles.primaryColorWrapper, {
                    [styles.active]: !primaryColorConfig.find(item => item.main === settings.primaryColor)
                  })}
                  onClick={() => setIsMenuOpen(prev => !prev)}
                >
                  <div
                    className={classnames(styles.primaryColor, 'flex items-center justify-center')}
                    style={{
                      backgroundColor: !primaryColorConfig.find(item => item.main === settings.primaryColor)
                        ? settings.primaryColor
                        : 'var(--mui-palette-action-selected)',
                      color: primaryColorConfig.find(item => item.main === settings.primaryColor)
                        ? 'var(--mui-palette-text-primary)'
                        : 'var(--mui-palette-primary-contrastText)'
                    }}
                  >
                    <i className='tabler-color-picker text-xl' />
                  </div>
                </div>
                <Popper
                  transition
                  open={isMenuOpen}
                  disablePortal
                  anchorEl={anchorRef.current}
                  placement='bottom-end'
                  className='z-[1]'
                >
                  {({ TransitionProps }) => (
                    <Fade {...TransitionProps} style={{ transformOrigin: 'right top' }}>
                      <Paper elevation={6} style={{ padding: '16px', marginTop: '1px' }}>
                        <ClickAwayListener onClickAway={handleMenuClose}>
                          <div>
                            <DebouncedColorPicker
                              color={settings.primaryColor}
                              onChange={color => handleChange('primaryColor', color)}
                            />
                          </div>
                        </ClickAwayListener>
                      </Paper>
                    </Fade>
                  )}
                </Popper>
              </div>
            </div>
            <div className='flex flex-col gap-2'>
              <p className='font-medium'>Testing Color</p>
           
             
                <div
                  ref={anchorRef}
                  className={classnames(styles.primaryColorWrapper, {
                    [styles.active]: !primaryColorConfig.find(item => item.main === settings.primaryColor)
                  })}
                  onClick={() => setIsMenuOpen(prev => !prev)}
                >
                  <div
                    className={classnames(styles.primaryColor, 'flex items-center justify-center')}
                    style={{
                      backgroundColor: !primaryColorConfig.find(item => item.main === settings.primaryColor)
                        ? settings.primaryColor
                        : 'var(--mui-palette-action-selected)',
                      color: primaryColorConfig.find(item => item.main === settings.primaryColor)
                        ? 'var(--mui-palette-text-primary)'
                        : 'var(--mui-palette-primary-contrastText)'
                    }}
                  >
                    <i className='tabler-color-picker text-xl' />
                  </div>
                </div>
                <Popper
                  transition
                  open={isMenuOpen}
                  disablePortal
                  anchorEl={anchorRef.current}
                  placement='bottom-end'
                  className='z-[1]'
                >
                  {({ TransitionProps }) => (
                    <Fade {...TransitionProps} style={{ transformOrigin: 'right top' }}>
                      <Paper elevation={6} style={{ padding: '16px', marginTop: '1px' }}>
                        <ClickAwayListener onClickAway={handleMenuClose}>
                          <div>
                            <DebouncedColorPicker
                              color={settings.primaryColor}
                              onChange={color => handleChange('primaryColor', color)}
                            />
                          </div>
                        </ClickAwayListener>
                      </Paper>
                    </Fade>
                  )}
                </Popper>
         
            </div> */}
            

            <div className='flex flex-col gap-2'>
              <p className='font-medium'>Primary Color</p>
              <div>
              
                   <div

                  ref={anchorRef}
                  className={classnames(styles.primaryColorWrapper)}

                  onClick={() => setIsMenuOpen(prev => !prev)}
                >
                 <div
                    className={classnames(styles.primaryColor, 'flex items-center justify-center')}
                    style={{
                      backgroundColor: color
                    }}
                  >
                    <i className='tabler-color-picker text-xl' />
                  </div>
                  <Popper
                  transition
                  open={isMenuOpen}

                  disablePortal
                  anchorEl={anchorRef.current}

                  placement='bottom-end'
                  className='z-[1]'
                >
                  {({ TransitionProps }) => (
                    <Fade {...TransitionProps} style={{ transformOrigin: 'right top' }}>
                      <Paper elevation={6} style={{ padding: '16px', marginTop: '1px' }}>
                        <ClickAwayListener onClickAway={handleMenuClose}>
                          <div>
                          <DebouncedColorPicker
                color={color}
                onChange={setColor}
                />
                          </div>
                        </ClickAwayListener>
                      </Paper>
                    </Fade>
                  )}
                </Popper>
                </div>
                
              </div>
      
                <div className='border h-44 w-44' style={{background:color}}>hello color container</div>
                <p>{color}</p>
      
            </div>
            <div className='flex flex-col gap-2'>
              <p className='font-medium'>Secondary Color</p>
              <div>
              
                   <div

                  ref={anchorRef}
                  className={classnames(styles.primaryColorWrapper)}

                  onClick={() => setIsMenuOpen(prev => !prev)}
                >
                 <div
                    className={classnames(styles.primaryColor, 'flex items-center justify-center')}
                    style={{
                      backgroundColor: color
                    }}
                  >
                    <i className='tabler-color-picker text-xl' />
                  </div>
                  <Popper
                  transition
                  open={isMenuOpen}

                  disablePortal
                  anchorEl={anchorRef.current}

                  placement='bottom-end'
                  className='z-[1]'
                >
                  {({ TransitionProps }) => (
                    <Fade {...TransitionProps} style={{ transformOrigin: 'right top' }}>
                      <Paper elevation={6} style={{ padding: '16px', marginTop: '1px' }}>
                        <ClickAwayListener onClickAway={handleMenuClose}>
                          <div>
                          <DebouncedColorPicker
                color={color}
                onChange={setColor}
                />
                          </div>
                        </ClickAwayListener>
                      </Paper>
                    </Fade>
                  )}
                </Popper>
                </div>
                
              </div>
      
                <div className='border h-44 w-44' style={{background:color}}>hello color container</div>
                <p>{color}</p>
      
            </div>
            <div className='flex flex-col gap-2'>
              <p className='font-medium'>Primary Test Color</p>
              <div>
              
                   <div

                  ref={anchorRef}
                  className={classnames(styles.primaryColorWrapper)}

                  onClick={() => setIsMenuOpen(prev => !prev)}
                >
                 <div
                    className={classnames(styles.primaryColor, 'flex items-center justify-center')}
                    style={{
                      backgroundColor: color
                    }}
                  >
                    <i className='tabler-color-picker text-xl' />
                  </div>
                  <Popper
                  transition
                  open={isMenuOpen}

                  disablePortal
                  anchorEl={anchorRef.current}

                  placement='bottom-end'
                  className='z-[1]'
                >
                  {({ TransitionProps }) => (
                    <Fade {...TransitionProps} style={{ transformOrigin: 'right top' }}>
                      <Paper elevation={6} style={{ padding: '16px', marginTop: '1px' }}>
                        <ClickAwayListener onClickAway={handleMenuClose}>
                          <div>
                          <DebouncedColorPicker
                color={color}
                onChange={setColor}
                />
                          </div>
                        </ClickAwayListener>
                      </Paper>
                    </Fade>
                  )}
                </Popper>
                </div>
                
              </div>
      
                <div className='border h-44 w-44' style={{background:color}}>hello color container</div>
                <p>{color}</p>
      
            </div>
          </div>
          <div className='flex flex-col gap-2'>
            <label htmlFor='fontDropdown' className='font-medium'>
              Font
            </label>
            <select
              id='fontDropdown'
              value={selectedFont}
              onChange={e => setSelectedFont(e.target.value)}
              className='border rounded p-2'
            >
              {fontOptions.map(font => (
                <option key={font} value={font}>
                  {font}
                </option>
              ))}
            </select>
          </div>

          <Container className='mt-4' style={{ fontFamily: selectedFont }}>
            <p>
              This is a sample paragraph preview. Lorem ipsum dolor sit amet consectetur adipisicing elit. Cupiditate,
              doloremque ullam. Iusto magnam molestiae magni, numquam suscipit soluta dignissimos illo officiis
              voluptatum, dolor libero sunt dolores repudiandae repellat cumque. Animi sapiente beatae rerum dolor ad
              sint, harum minus veritatis doloremque atque magni inventore ut libero. Dolor aut ducimus sapiente maiores
              consectetur odit, facere amet omnis consequuntur atque harum nobis sed expedita nihil aliquam nemo eveniet
              repellat laudantium blanditiis vitae corrupti, molestiae vero. Dolores, maiores ab doloremque, dignissimos
              sunt nihil modi error qui officiis molestiae natus, id delectus ipsa est at iure sed laborum. Atque
              aliquam laborum velit consequuntur. Quo, nisi?
            </p>
          </Container>
        </div>
      </div>

      <div>
        <Image className='rounded' height={100} width={100} alt={'Logo'} src={imgSrc} />

        <div>
          <Button component='label' variant='contained' htmlFor='website-logo-upload'>
            Upload New Logo
            <input
              hidden
              type='file'
              value={fileInput}
              accept='image/png, image/jpeg'
              onChange={handleFileInputChange}
              id='website-logo-upload'
            />
          </Button>
          <Button onClick={handleImgReset} variant='tonal' color='secondary'>
            Reset
          </Button>
        </div>
      </div>
    </ScrollWrapper>
  )
}

export default Customizer

